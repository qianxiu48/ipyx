name: IP延迟测试

on:
  # 定时触发：每3小时运行一次
  schedule:
     - cron: '0 0 * * *'  # 每天凌晨00:00运行
     
  # 允许手动触发
  workflow_dispatch:

jobs:
  ip-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp

    - name: 环境测试
      run: |
        echo "🔧 运行环境测试..."
        python test_github_env.py
        echo "✅ 环境测试完成"

    - name: 运行IP测试
      timeout-minutes: 30  # 设置30分钟超时
      run: |
        # 添加调试信息
        echo "🔍 当前工作目录:"
        pwd
        echo ""
        echo "📁 运行前目录结构:"
        ls -la
        echo ""
        
        # 显示环境变量（调试用）
        echo "🔧 环境变量检查:"
        echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
        echo "RUNNER_ENVIRONMENT: $RUNNER_ENVIRONMENT"
        echo ""
        
        # 运行IP测试（使用GitHub优化配置）
        echo "🚀 开始IP测试（GitHub优化配置）..."
        
        # 创建输出目录（确保存在）
        mkdir -p ip_results
        echo "✅ 已创建ip_results目录"
        
        # 添加超时控制和错误处理
        set +e  # 允许命令失败而不停止脚本
        
        # 使用优化的参数配置，增加超时时间和调试信息
        # 添加timeout命令，防止脚本无限期卡住
        timeout 25m python ip_tester.py --output ip_results --max-ips 2000 --concurrent 10 --max-latency 3000
        exit_code=$?
        set -e  # 恢复错误处理
        
        if [ $exit_code -eq 0 ]; then
            echo "✅ IP测试成功完成"
        elif [ $exit_code -eq 124 ]; then
            echo "⚠️ IP测试超时（25分钟），但可能已生成部分结果"
        else
            echo "⚠️ IP测试失败（退出码: $exit_code），但继续执行后续步骤"
        fi
        
        # 检查是否创建了结果目录和文件
        echo ""
        echo "📁 运行后目录结构:"
        ls -la
        echo ""
        echo "🔍 详细检查ip_results目录:"
        if [ -d "ip_results" ]; then
            echo "✅ ip_results目录存在"
            echo "📂 目录内容:"
            ls -la ip_results/ 2>/dev/null || echo "⚠️ 无法访问ip_results目录"
            echo ""
            echo "📄 文件列表:"
            find ip_results -type f -name "*.txt" 2>/dev/null | head -20 || echo "⚠️ 未找到txt文件"
        else
            echo "❌ ip_results目录不存在"
            echo "🔍 查找所有可能的结果目录:"
            find . -type d -name "*result*" -o -name "*ip*" 2>/dev/null | sort || echo "⚠️ 未找到相关目录"
        fi
        
        # 检查是否有任何结果文件
        echo ""
        echo "🔍 检查所有txt文件:"
        find . -name "*.txt" -type f 2>/dev/null | grep -v ".git" | head -20 || echo "⚠️ 未找到任何txt文件"

    - name: 将结果文件复制到仓库根目录
      run: |
        echo "📂 将结果文件复制到仓库根目录..."
        
        # 检查是否有结果目录
        if [ -d "ip_results" ]; then
          # 复制所有txt文件到仓库根目录
          cp ip_results/*.txt ./
          echo "✅ 结果文件已复制到仓库根目录"
          echo "📄 当前目录下的txt文件:"
          ls -la *.txt 2>/dev/null || echo "⚠️ 没有找到txt文件"
        else
          echo "❌ 未找到结果目录，检查是否有其他结果文件..."
          
          # 检查是否有直接生成的结果文件
          echo "🔍 查找所有txt文件:"
          find . -name "*.txt" -type f | grep -v ".git" | head -20
          
          # 如果找到txt文件，直接使用它们
          txt_files=$(find . -name "*.txt" -type f | grep -v ".git" | head -10)
          if [ -n "$txt_files" ]; then
            echo "✅ 找到以下txt文件，直接使用:"
            echo "$txt_files"
          else
            echo "⚠️ 未找到任何结果文件，创建空的summary.txt"
            echo "# IP测试运行完成，但未生成结果文件" > summary.txt
            echo "# 生成时间: $(date +'%Y-%m-%d %H:%M:%S')" >> summary.txt
            echo "# 可能原因: 测试超时、网络问题或IP源不可用" >> summary.txt
          fi
        fi

    - name: 提交结果文件到仓库
      run: |
        echo "📝 提交结果文件到仓库..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 检查是否有新的txt文件
        if ls *.txt 1> /dev/null 2>&1; then
          git add *.txt
          git commit -m "自动提交IP测试结果 $(date +'%Y-%m-%d %H:%M:%S')"
          echo "✅ 结果文件已提交到仓库"
        else
          echo "❌ 未找到要提交的txt文件"
          # 如果没有结果文件，创建一个空的提交来避免后续步骤失败
          git commit --allow-empty -m "IP测试运行完成，但未生成新结果文件 $(date +'%Y-%m-%d %H:%M:%S')"
        fi

    - name: 直接推送到main分支
      run: |
        echo "🚀 直接推送到main分支..."
        
        # 使用GitHub Token进行推送
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git push origin main
        echo "✅ 已直接推送到main分支"

    - name: 显示测试结果
      run: |
        echo "📊 测试结果汇总:"
        if [ -f "summary.txt" ]; then
          cat summary.txt
        else
          echo "未找到汇总文件"
        fi
